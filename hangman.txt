The Goal

   Write a program that plays the Hangman game. A description of the game can
   be found at\001[1]http://en.wikipedia.org/wiki/Hangman_(game).

The Problem

   Your goal is to use a provided API to play Hangman efficiently. You need
   to guess a word using as few guesses as possible, and make no more than
   maxWrongGuesses incorrect guesses.\001You are writing the letter/word
   guessing strategy.

   We would like you to use the provided Java APIs and to write your solution
   in Java. However, if you don't know Java or are not comfortable with it,
   please feel free to use other reasonably mainstream programming languages
   (C++, Python, Ruby, Scala, etc.). If you do use another language, please
   make sure that your program can accept a dictionary file and a list of
   test words (that are in the dictionary). The output of the program should
   be a score for each test word and the average score across all test words.
   Also, if you don't use Java, please provide build instructions if they are
   not straightforward.

   Your score for a word will be:

   \001\001\001# letter guesses + # number of incorrect word guesses\001if
   you guessed the word right before making maxWrongGuesses\001incorrect
   guesses

   or

   \001\001\00125\001if you lost the game before guessing the word correctly.

   You will need to write an implementation of the GuessingStrategy interface
   and some code to use your GuessingStrategy on a HangmanGame instance.

   The pseudocode to run your strategy for a HangmanGame is:

 // runs your strategy for the given game, then returns the score
 public int run(HangmanGame game, GuessingStrategy strategy)\001{
 \001\001while (game has not been won or lost)\001{
     ask the strategy for the next guess
 \001\001 \001apply the next guess to the game
 \001\001}
 \001\001return game.score();
 }

   A trivial strategy might be to guess 'A', then 'B', then 'C', etc. until
   you've guessed every letter in the word (this will work great for "cab"!)
   or you've lost.

   Every word you encounter will be a word from the words.txt file.

   Example

   For example, let's say the word is FACTUAL.

   Here is what a series of calls might look like:

 HangmanGame game = new HangmanGame("factual", 4); // secret word is factual, 4 wrong guesses are allowed
 System.out.println(game);
 new GuessLetter('a').makeGuess(game);
 System.out.println(game);
 new GuessWord("natural").makeGuess(game);
 System.out.println(game);
 new GuessLetter('x').makeGuess(game);
 System.out.println(game);
 new GuessLetter('u').makeGuess(game);
 System.out.println(game);
 new GuessLetter('l').makeGuess(game);
 System.out.println(game);
 new GuessWord("factual").makeGuess(game);
 System.out.println(game);

   The output would be:

 -------; score=0; status=KEEP_GUESSING
 -A---A-; score=1; status=KEEP_GUESSING
 -A---A-; score=2; status=KEEP_GUESSING
 -A---A-; score=3; status=KEEP_GUESSING
 -A--UA-; score=4; status=KEEP_GUESSING
 -A--UAL; score=5; status=KEEP_GUESSING
 FACTUAL; score=5; status=GAME_WON

   game.score() will be 5 in this case since there were 4 letter guesses and
   1 incorrect word guess made.

Sample Data

   As a baseline, here are scores for a reasonably good guessing strategy
   against a set of 15 random words. Your strategy will likely be better for
   some of the words and worse for other words, but the average score/word
   should be in the same ballpark.

   COMAKER = 25 (was not able to guess the word before making more than 5
   mistakes)
   CUMULATE = 9
   ERUPTIVE = 5
   FACTUAL = 9
   MONADISM = 8
   MUS = 25 (was not able to guess the word before making more than 5
   mistakes)
   NAGGING = 7
   OSES = 5
   REMEMBERED = 5
   SPODUMENES = 4
   STEREOISOMERS = 2
   TOXICS = 11
   TRICHROMATS = 5
   TRIOSE = 5
   UNIFORMED = 5

Resources

   You should have been provided with a zip file with source code and a
   dictionary file to get you started. If you were not sent this zip file, or
   you have any questions about the contents, please let us know right away.

   The resources contain a dictionary file called words.txt. You can assume
   all words that your program will be tested with come from this dictionary
   file.

Judging

   Your solution will be graded on the following criteria

     + code quality, readability, and design
     + performance\001(speed/memory footprint). We are more concerned with
       average time per game, so expensive one-time initialization is okay
       (as long as it's not too egregious)
     + total score for 100 random words, compared to the total score of
       several reference implementations for the same 100 words (max wrong
       guesses is typically set to 5)

   --
   Ronald Miguel\001\001| \001Head of Talent \001| \001Factual, Inc. - Human
   Resources \001| \001310-286-9400, ext. 152 (direct office line) \001|
   \001[2]ron@factual.com\001
   Connect with me on LinkedIn:\001[3]http://www.linkedin.com/in/ronmiguel
   Factual Job Openings:\001[4]http://www.factual.com/jobs
   [5]www.factual.com

References

   Visible links
   1. http://en.wikipedia.org/wiki/Hangman_(game
   2. mailto:ron@factual.com
   3. http://www.linkedin.com/in/ronmiguel
   4. http://www.factual.com/jobs
   5. http://www.factual.com/
